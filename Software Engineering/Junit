public class BinarySearch {
	
	public  static int   bsearch(int [] array,int size,int search){
		int lower_bound=0;//lower index
	    int higher_bound=size -1;//higher index
	    int index=-1;//index for search key
	    int mid=-1 ;//index for middle value 
		//while loop for comparison across the array
		while(lower_bound<=higher_bound){
			mid=(lower_bound+higher_bound)/2;
			if(array[mid]==search)
			{
				index=mid;
				break;
			}
			
			else if(array[mid]>search)higher_bound=mid-1;//element greater than middle element
			else lower_bound=mid+1;//element lower than the middle element
		}
		if(index!=-1)
		{    
			index+=1;
			return index;
		}
	else
	{  
		return -1;
	}
		
		
		
	}

}










import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import junit.framework.TestCase;

public class MathTest extends TestCase {

	private int[] array;
	private int size;
	private int search;
	public MathTest(String testName){
		super(testName);
	}
	protected void setUp() throws Exception{
		   super.setUp();
		   array=new int[5];
		   for(int i=0;i<5;i++)
			   array[i]=i+1;
		    size=5;
		    search =3;
	   }
	 protected void tearDown() throws Exception{
		   super.tearDown();
		   
		   
	   }
	 public void testBinarySuccess(){
		
		    
		   search =3;  
		   int index =3;
		   int indexreturn=BinarySearch.bsearch(array, size, search);
		   assertEquals(indexreturn,index);
	   }
	 public void testBinaryFailed()
	   {
		 
		  search =6;  
		  int index =3;
		  int indexreturn=BinarySearch.bsearch(array, size, search);
		   assertNotSame(indexreturn,index);
	   }
	 public void testBinaryFailed1()
	   {
		 
		  search =6;  
		  int index =-1;
		  int indexreturn=BinarySearch.bsearch(array, size, search);
		   assertEquals(indexreturn,index);
	   }

}

